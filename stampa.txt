void creaArrayProb()
{

    // da,un,0.250.,qui,0.250.,dove,0.250.,ogni,0.250.
    // per il calcolo delle probabilità nell'array diventa
    // da,un,0.250.,qui,0.500.,dove,0.750.,ogni,1.000

    // 1. leggo i caratteri finchè incontro la prima virgola
    // 2. se virgola==1, ho trovato la parola guida
    // 3. se virgola >1
    //       - realloc di probabilityOccorrenza * virgolaù
    //       - probabilityOccorrenza[virgola].parola = word
    //       - probabilityOccorrenza.probability= probability+probability

    // Come individuare le parole ',':
    // se virgola è in posizione indexchar=0 allora virgola = word

    numeroParole = 1;               // il numero di parole guida nell'arrayProbability
    int virgola = 0;                // contatore delle virgole trovate nel testo
    int numeroParoleSuccessive = 0; // il numero di parole successive;
    type_parola word;               // la parola in costruzione durante la lettura
    char c;                         // carattere letto
    double prob = 0;                // probabilità cumulativa
    int indiceCarattereRiga = 0;    // cursore che indica la posizione sulla riga
    int isNextWord = 1;             // bool che indica la prossima sequenza di caratteri
                                    //       è una parola: 1
                                    //       è una probabilità : 0
    int indiceParola = 0;           // indice per la costruzione della parola

    type_parola wordMemorizzata; // tengo in memoria l'ultima parola letta

    ProbabilityOccorrenza *probabilityOccorrenza;

    printf("\n\ncarico conteggi:\n");
    // word = (char *)malloc(sizeof(char) * 100000);
    // wordMemorizzata = (char *)malloc(sizeof(char) * 100000);

    FILE *fileCSV = fopen("export.csv", "r");
    if (fileCSV == NULL)
    {
        perror("creaArrayProb");
        EXIT_FAILURE;
    }

    // alloco la memoria per il primo Record del ProbabilityRecord;
    probabilityRecord = (ProbabilityRecord *)calloc(1, sizeof(ProbabilityRecord));
    if (probabilityRecord == NULL)
    {
        perror("ProbabilityRecord?");
        exit(1);
    }
    // alloco memoria per il primo carattere letto
    // word = (char *)calloc(1, sizeof(char));

    while ((c = fgetc(fileCSV)) != EOF)
    {
        switch (c)
        {
        case '\n':
            if (!isNextWord) // ho terminato di leggere le occorrenze; devo memorizzare l'ultima occorrenza
            {
                prob = (double)(prob + atof(word));
                // e creo il primo ProbabilityOccorrenza
                ProbabilityRecord probRecordTemp = probabilityRecord[numeroParole - 1];
                probRecordTemp.probabilityOccorrenze = (ProbabilityOccorrenza *)calloc(numeroParoleSuccessive, sizeof(ProbabilityOccorrenza));

                // ProbabilityOccorrenza *tempProbRecord = (ProbabilityOccorrenza *)calloc(numeroParoleSuccessive, sizeof(ProbabilityOccorrenza));
                // strcpy(tempProbRecord[numeroParoleSuccessive - 1].parola, wordMemorizzata);
                strcpy(probRecordTemp.probabilityOccorrenze[numeroParoleSuccessive - 1].parola, wordMemorizzata);
                //  tempProbRecord[numeroParoleSuccessive - 1].probability = prob;
                probRecordTemp.probabilityOccorrenze[numeroParoleSuccessive - 1].probability = prob;
                probabilityOccorrenza = probRecordTemp.probabilityOccorrenze;
                probabilityRecord[numeroParole - 1].probabilityOccorrenze = probabilityOccorrenza;
                printf(" (%f)", prob);
                fflush(stdout);
                pulisciStringa(word, _MAX_LENGTH_WORD_);
                pulisciStringa(wordMemorizzata, _MAX_LENGTH_WORD_);
                // free(probRecordTemp);
                isNextWord = 1;
                indiceCarattereRiga++;
            }
            // terminata di leggere la riga ripartono i contatori di riga e di virgola
            indiceCarattereRiga = 0;
            numeroParoleSuccessive = 0;
            numeroParole++;
            indiceParola = 0;
            virgola = 0;
            isNextWord = 1;
            prob = 0;
            pulisciStringa(word, _MAX_LENGTH_WORD_);

            break;

        case ',':
            if (virgola == 0)
            {
                if (indiceCarattereRiga == 0) // la virgola è la prima parola
                {
                    indiceCarattereRiga++;
                    indiceParola++;
                    // word = (char *)realloc(word, indiceCarattereRiga * sizeof(char));
                    appendCharToString(word, c, indiceParola - 1);
                    break;
                }

                else // prima virgola separatore incontrata
                {
                    numeroParoleSuccessive++;
                    indiceParola = 0;
                    appendCharToString(word, '\0', indiceCarattereRiga);
                    // ho trovato la prima parola: la inserisco nel prob array
                    ProbabilityRecord *probabilityRecordTmp = (ProbabilityRecord *)realloc(probabilityRecord, sizeof(ProbabilityRecord) * (numeroParole + 1));
                    strcpy(probabilityRecordTmp[(numeroParole - 1)].parola, word);
                    probabilityRecordTmp[numeroParole - 1].numeroParoleSuccessive = numeroParoleSuccessive;

                    probabilityRecordTmp->probabilityOccorrenze = malloc(sizeof(ProbabilityOccorrenza) * 1);

                    probabilityRecord = probabilityRecordTmp;
                    probabilityRecord[numeroParole - 1].probabilityOccorrenze = probabilityOccorrenza;

                    virgola++;
                    pulisciStringa(word, _MAX_LENGTH_WORD_);
                    // probabilityRecord = probTemp;
                    printf("\n[%s] ", probabilityRecord[(numeroParole - 1)].parola);
                    fflush(stdout);

                    indiceCarattereRiga++;
                }
            }

            else // virgola successiva indica le occorrenze
            {
                if (wordMemorizzata == word) // se la parola precedente è una virgola allora la virgola è la parola successiva
                {
                }

                if (isNextWord) // devo leggere una parola
                {
                    strcpy(wordMemorizzata, word);
                    virgola++;
                    isNextWord = 0;
                    indiceCarattereRiga++;
                    indiceParola = 0;
                    pulisciStringa(word, _MAX_LENGTH_WORD_);
                }
                else // leggo l'occorrenza
                {
                    numeroParoleSuccessive++;
                    printf("%s", wordMemorizzata);
                    printf("%s", word);
                    fflush(stdout);

                    prob = (double)(prob + atof(word));
                    printf("%d", numeroParoleSuccessive);
                    fflush(stdout);
                    // e creo il primo ProbabilityOccorrenza
                    ProbabilityRecord probRecordTemp = probabilityRecord[numeroParole - 1];

                    probRecordTemp.probabilityOccorrenze = (ProbabilityOccorrenza *)realloc(probabilityRecord[numeroParole - 1].probabilityOccorrenze, numeroParoleSuccessive);

                    printf("\nA");
                    fflush(stdout);
                    // ProbabilityOccorrenza *tempProbOccorrenza = (ProbabilityOccorrenza *)calloc(numeroParoleSuccessive, sizeof(ProbabilityOccorrenza));
                    strcpy(probRecordTemp.probabilityOccorrenze[0].parola, wordMemorizzata);
                    printf("\ncreo probtemporaneo poccorrenze");
                    printf("\nB");
                    fflush(stdout);
                    probRecordTemp.probabilityOccorrenze[numeroParoleSuccessive - 1].probability = prob;

                    probRecordTemp.probabilityOccorrenze = probRecordTemp.probabilityOccorrenze;
                    printf("\nD");

                    probabilityRecord[numeroParole - 1] = probRecordTemp;
                    probabilityRecord[numeroParole - 1].probabilityOccorrenze = probRecordTemp.probabilityOccorrenze;
                    probabilityRecord[numeroParole - 1].numeroParoleSuccessive++;
                    probabilityRecord[numeroParole - 1].probabilityOccorrenze = probabilityOccorrenza;
                    printf(" [%s] (%f)", probabilityRecord[numeroParole - 1].probabilityOccorrenze[numeroParoleSuccessive - 1].parola, probabilityRecord[numeroParole - 1].probabilityOccorrenze[numeroParoleSuccessive - 1].probability);
                    fflush(stdout);
                    pulisciStringa(word, _MAX_LENGTH_WORD_);
                    pulisciStringa(wordMemorizzata, _MAX_LENGTH_WORD_);
                    // free(probRecordTemp);
                    isNextWord = 1;
                    indiceCarattereRiga++;
                }
            }
            break;
        default:

            indiceCarattereRiga++;
            indiceParola++;
            // word = (char *)realloc(word, indiceCarattereRiga * sizeof(char));
            appendCharToString(word, c, indiceParola - 1);
            break;
        }
    }
    /*
    fclose(fileCSV);
    FILE *ftest;
    ftest = fopen("ww.txt", "w");
    fclose(ftest);
*/
    numeroParole--;
    printf("\n\n\n\n");
    // stampo tutto
    for (int i = 0; i < numeroParole - 1; i++)
    {
        printf("\n%s; ", probabilityRecord[i].parola);
        for (int j = 0; j < probabilityRecord[i].numeroParoleSuccessive; j++)
        {
            printf("  (%s) %f", probabilityRecord[i].probabilityOccorrenze[j].parola, probabilityRecord[i].probabilityOccorrenze[j].probability);
        }
    }
}

